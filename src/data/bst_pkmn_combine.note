import com.opencsv.{CSVReader, CSVWriter}
import java.io.File
import java.nio.file.Files
import java.nio.charset.StandardCharsets.UTF_8

val dir = new File("""C:\Users\Raymond\Documents\Programming\HTML-JS\RandomizedEvolutions""")
val in1 = new File(dir, "BST.csv")
val in2 = new File(dir, "listOfPokemon.csv")
val out = new File(dir, "out.csv")

val in1read = Files.newBufferedReader(in1.toPath, UTF_8)
val in2read = Files.newBufferedReader(in2.toPath, UTF_8)
val in1csv = new CSVReader(in1read)
val in2csv = new CSVReader(in2read)
val in1data = in1csv.readAll.toArray.toSeq.map{_ match {
    case Array(a,b,c,d,e,f,g,h) => (
      a.toString,
      b.toString,
      c.toString.toInt +
      d.toString.toInt +
      e.toString.toInt +
      f.toString.toInt +
      g.toString.toInt +
      h.toString.toInt
    )
    case Array(a,b,c,d,e,f,g,h,i) => (
      a.toString,
      b.toString,
      c.toString.toInt +
      d.toString.toInt +
      e.toString.toInt +
      f.toString.toInt +
      g.toString.toInt +
      h.toString.toInt
    )
}}
val in2data = in2csv.readAll.toArray.toSeq.map{_ match {
    case Array(a,b,c,d) => (
      a.toString, b.toString, c.toString, d.toString
    )
}}

in1csv.close()
in2csv.close()

val outData = {
  val bst = in1data.map{x => ((x._1, x._3))}.toMap
  in2data.map{x =>
    Array(x._1, x._2, x._3, x._4, bst(x._1).toString)
  }
}

val outWrite = Files.newBufferedWriter(out.toPath, UTF_8)
val outCsv = new CSVWriter(outWrite, ',')
outData.foreach{outCsv.writeNext _}
outCsv.close()

